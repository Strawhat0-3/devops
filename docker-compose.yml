version: '3.8'

networks:
  front-tier:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  back-tier:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  data-tier:
    driver: bridge
    internal: true  # Réseau isolé sans accès à l'extérieur
    ipam:
      config:
        - subnet: 172.22.0.0/24

services:
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      back-tier:
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:13
    container_name: postgres
    networks:
      data-tier:
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: votingdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  vote:
    build: ./vote
    container_name: vote_app
    networks:
      front-tier:
      back-tier:
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "5000:80"
    environment:
      REDIS_HOST: redis
      DB_HOST: db
    restart: unless-stopped

  result:
    build: ./result
    container_name: result_app
    networks:
      front-tier:
      data-tier:
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5001:80"
    environment:
      DB_HOST: db
    restart: unless-stopped

  worker:
    build: ./worker
    container_name: worker_app
    networks:
      back-tier:
      data-tier:
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      DB_HOST: db
    restart: unless-stopped

volumes:
  postgres_data: