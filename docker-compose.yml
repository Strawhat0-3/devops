version: '3.8'

services:
  redis:
    image: redis:alpine
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s  # Ajout du timeout recommandé
      retries: 5
    restart: unless-stopped  # Bonne pratique pour la résilience

  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: votingdb
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistence des données
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  vote:
    build: ./vote
    container_name: vote_app
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "5000:80"
    environment:  # Ajout recommandé des variables d'environnement
      REDIS_HOST: redis
      DB_HOST: db
    restart: unless-stopped

  result:
    build: ./result
    container_name: result_app
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5001:80"
    environment:
      DB_HOST: db
    restart: unless-stopped

  worker:
    build: ./worker
    container_name: worker_app
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      DB_HOST: db
    restart: unless-stopped

volumes:
  postgres_data:  # Déclaration du volume pour PostgreSQL